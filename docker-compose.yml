version: '3.5'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.0
    hostname: zookeeper
    container_name: ktorpatterns-zookeeper
    networks:
      - ktorpatterns-network
    restart: on-failure
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:5.5.0
    networks:
      - ktorpatterns-network
    restart: on-failure
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: LISTENER_A://kafka:29092,LISTENER_B://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: LISTENER_A://kafka:29092,LISTENER_B://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_A:PLAINTEXT,LISTENER_B:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_A
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  kafka_manager:
    image: hlebalbau/kafka-manager:stable
    networks:
      - ktorpatterns-network
    ports:
      - "9000:9000"
    environment:
      ZK_HOSTS: "zookeeper:2181"
      APPLICATION_SECRET: "random-secret"

  postgres:
    image: postgres:13-alpine
    container_name: ktorpatterns-postgres
    networks:
      ktorpatterns-network:
        aliases:
          - postgres
    restart: on-failure
    healthcheck:
      test: [CMD-SHELL, pg_isready -U postgres]
      interval: 5s
      timeout: 10s
      retries: 5
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: password1
      POSTGRES_DB: ktorpatterns
    volumes:
      - ktorpatterns-postgres-volume:/var/lib/postgresql/data
      - $PWD/env/init.sql:/docker-entrypoint-initdb.d/init.sql

networks:
  ktorpatterns-network:
    name: ktorpatterns-network

volumes:
  ktorpatterns-postgres-volume: